<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oxm="http://www.springframework.org/schema/oxm"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd" >
    <!-- ==============================     -->

    <!-- auto-inject, autowire using annotations -->
    <context:annotation-config />

    <import resource="cloud-config.xml" />

    <!-- inject core action classes (ActionTestHelper, etc.) -->
    <context:component-scan base-package="com.msi.tough.query" />

    <bean id="servicesPropertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
                <list>
                        <value>classpath*:/*.properties</value>
                </list>
        </property>
    </bean>

    <bean id="DB_PASSWORD" class="java.lang.String">
        <constructor-arg value="${db.password}"/>
    </bean>


    <bean id="accessKey" class="java.lang.String">
        <constructor-arg value="${test.accessKey}"/>
    </bean>

    <bean id="secretKey" class="java.lang.String">
        <constructor-arg value="${test.secretKey}"/>
    </bean>

    <bean id="limitedQuotaAccessKey" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaAccessKey}"/>
    </bean>

    <bean id="limitedQuotaSecretKey" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaSecretKey}"/>
    </bean>

    <bean id="limitedQuotaOwnerId" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaOwnerId}"/>
    </bean>

    <bean id="limitedQuotaZone" class="java.lang.String">
        <constructor-arg value="${test.limitedQuotaZone}"/>
    </bean>

    <bean id="basicAWSCredentials" class="com.amazonaws.auth.BasicAWSCredentials" >
        <constructor-arg value="${test.accessKey}" />
        <constructor-arg value="${test.secretKey}" />
    </bean>

    <bean id="security" factory-method="getInstance"
        class="com.msi.tough.security.AESSecurity">
    </bean>

    <!-- stand-in for full cloud config, with only the current test. -->
    <util:map id="configuration0">
    </util:map>

    <bean id="configuration" factory-method="merge" class="com.msi.tough.core.MapUtil">
        <constructor-arg ref="cloud-config"></constructor-arg>
        <constructor-arg ref="configuration0"></constructor-arg>
    </bean>

    <bean id="appctx" factory-method="getInstanceForInjection"
        class="com.msi.tough.core.Appctx">
        <property name="configuration" ref="configuration"/>
        <!-- use a single thread executor, so tests don't have to wait. -->
        <property name="executorServiceInstance">
            <bean class="com.msi.tough.utils.SynchronousExecutor"/>
        </property>
    </bean>

    <bean class="com.msi.tough.core.AppctxInjector"/>

    <bean id="hibernateUtil" class="com.msi.tough.core.HibernateUtil">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="testConnection" />
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration"></property>
        <property name="hibernateProperties">
            <value>hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
                hibernate.cache.provider_class=org.hibernate.cache.NoCacheProvider
                hibernate.show_sql=true
                hibernate.hbm2ddl.auto=update
            </value>
        </property>
    </bean>

    <bean id="testConnection" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://${deploy.ip}:3306/msi" />
        <property name="username" value="msi" />
        <property name="password" value="${db.password}" />
        <property name="defaultAutoCommit" value="false"></property>
        <property name="initialSize" value="1"></property>
        <property name="maxActive" value="5"></property>
        <property name="testWhileIdle" value="false"></property>
        <property name="testOnBorrow" value="false"></property>
        <property name="testOnReturn" value="false"></property>
        <property name="validationQuery" value="SELECT 1"></property>
        <property name="timeBetweenEvictionRunsMillis" value="5000"></property>
        <property name="minIdle" value="1"></property>
        <property name="maxWait" value="5000"></property>
        <property name="removeAbandoned" value="false"></property>
    </bean>


</beans>
