package com.msi.tough.model.rds;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.Query;
import org.hibernate.Session;

import com.amazonaws.services.rds.model.IPRange;
import com.msi.tough.model.AccountBean;

/**
 * RdsDbsecurityGroup generated by hbm2java
 */

@Entity
@Table(name = "rds_security_group")
public class RdsDbsecurityGroup {

	public static String getSelectAllByGroupNameSQL(final String secGrpName,
			final long accountId, final String marker) {
		String markerSql = "";
		String groupSql = "";

		if (marker != null && marker != "") {
			markerSql = " and dbsecurityGroupName > '" + marker + "'";
		}

		if (secGrpName != null && secGrpName != "") {
			groupSql = " and dbsecurityGroupName = '" + secGrpName + "'";
		}

		final String sql = "from RdsDbsecurityGroup where account ="
				+ accountId + markerSql + groupSql
				+ " order by dbsecurityGroupName";

		return sql;
	}

	public static String getSelectByGroupNameSQL(final String secGrpName,
			final long accountId, final String marker) {
		String markerSql = "";
		String groupSql = "";

		if (marker != null && marker != "") {
			markerSql = " and dbsecurityGroupName > '" + marker + "'";
		}

		if (secGrpName != null && secGrpName != "") {
			groupSql = " and dbsecurityGroupName = '" + secGrpName + "'";
		}

		final String sql = "from RdsDbsecurityGroup where transcendOnly = false and account ="
				+ accountId
				+ markerSql
				+ groupSql
				+ " order by dbsecurityGroupName";

		return sql;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "rds_db_security_group_id")
	private long id;
	@ManyToOne
	private AccountBean account;
	private String dbsecurityGroupName;
	private String dbsecurityGroupId;

	private String dbsecurityGroupDescription;

	private String status;

	private int port;

	private String stackId;

	// private int counter;

	@Column(name = "internals")
	private String internals;

	@Column(name = "transcendOnly", nullable = false)
	private boolean transcendOnly; // if this flag is set, the DBSecurityGroup
									// should not be visible to users

	public RdsDbsecurityGroup() {
		port = -1;
		// counter = -1;
		transcendOnly = false;
	}

	public AccountBean getAccount() {
		return account;
	}

	@SuppressWarnings("unchecked")
	public Collection<RdsEC2SecurityGroupBean> getRdsEC2SecurityGroups(
			final Session s) {
		final Query q = s
				.createQuery("from RdsEC2SecurityGroupBean where rdsSecGroupId="
						+ id);
		return q.list();
	}

	@SuppressWarnings("unchecked")
	public Collection<IPRange> getAwsIPRanges(final Session s) {
		final ArrayList<IPRange> ranges = new ArrayList<IPRange>();
		final Query q = s
				.createQuery("from RdsIPRangeBean where rdsSecGroupId=" + id);
		for (final RdsIPRangeBean bean : (List<RdsIPRangeBean>) q.list()) {
			final IPRange range = new IPRange();
			range.setCIDRIP(bean.getCidrip());
			range.setStatus(bean.getStatus());
			ranges.add(range);
		}
		return ranges;
	}

	public String getDbsecurityGroupDescription() {
		return dbsecurityGroupDescription;
	}

	public String getDbsecurityGroupId() {
		return dbsecurityGroupId;
	}

	public String getDbsecurityGroupName() {
		return dbsecurityGroupName;
	}

	@SuppressWarnings("unchecked")
	public List<RdsEC2SecurityGroupBean> getEC2SecGroupBean(final Session s) {
		final Query q = s
				.createQuery("from RdsEC2SecurityGroupBean where rdsSecGroupId="
						+ id);
		return q.list();
	}

	public long getId() {
		return id;
	}

	public String getInternals() {
		return internals;
	}

	@SuppressWarnings("unchecked")
	public List<RdsIPRangeBean> getIPRange(final Session s) {
		final Query q = s
				.createQuery("from RdsIPRangeBean where rdsSecGroupId=" + id);
		return q.list();
	}

	public int getPort() {
		return port;
	}

	public String getStackId() {
		return stackId;
	}

	public String getStatus() {
		return status;
	}

	public boolean isTranscendOnly() {
		return transcendOnly;
	}

	public void setAccount(final AccountBean account) {
		this.account = account;
	}

	public void setDbsecurityGroupDescription(
			final String dbsecurityGroupDescription) {
		this.dbsecurityGroupDescription = dbsecurityGroupDescription;
	}

	// public String getOwnerId() {
	// return "" + account.getId();
	// }

	public void setDbsecurityGroupId(final String dbsecurityGroupId) {
		this.dbsecurityGroupId = dbsecurityGroupId;
	}

	public void setDbsecurityGroupName(final String dbsecurityGroupName) {
		this.dbsecurityGroupName = dbsecurityGroupName;
	}

	// public int getCounter(){
	// return counter;
	// }

	public void setId(final long id) {
		this.id = id;
	}

	//
	// public void setCounter(final int c) {
	// counter = c;
	// }

	public void setInternals(final String internals) {
		this.internals = internals;
	}

	public void setPort(final int p) {
		port = p;
	}

	public void setStackId(final String stackId) {
		this.stackId = stackId;
	}

	public void setStatus(final String status) {
		this.status = status;
	}

	public void setTranscendOnly(final boolean transcendOnly) {
		this.transcendOnly = transcendOnly;
	}
}
